// *****
// Glamourous
// *****

// Dynamic box shadow gradient
// Reference http://prntscr.com/j1mxnc
= dynamic_shadow($gradient: (degree: 75deg, start: #6d78ff, end: #00ffb8), $shadow: (blur: 0.4rem, opacity: .7, y: .5rem))
  position: relative
  z-index: 1
  background: linear-gradient(map-get($gradient, degree), map-get($gradient, start), map-get($gradient, end))
  &:after
    +content
    width: 100%
    height: 100%
    top: map-get($shadow, y)
    z-index: -1
    background: inherit
    filter: blur(map-get($shadow, blur))
    opacity: map-get($shadow, opacity)

// Underline border animation on hover
= animate_underline($color: #0087ca, $timing: .25s, $ease: $ease-in-out-quad, $borderHeight: 2px)
  display: inline-block
  position: relative
  &:after
    +content
    width: 100%
    transform: scaleX(0)
    height: $borderHeight
    bottom: 0
    left: 0
    background-color: $color
    transform-origin: bottom right
    transition: transform 0.25s ease-out
  &:hover::after
    transform: scaleX(1)
    transform-origin: bottom left

// Show hint on hover
// ATTENTION! Parent element need to have data-text attribute with text inside
= hint($direction: (x: left, y: top), $color: white, $bg: rgba(black, .8), $width: 150px, $gap: 10px)
  position: relative
  z-index: 1
  &:after
    content: attr(data-text)
    display: block
    color: $color
    background-color: $bg
    max-width: $width
    padding: $gap
    @if map-get($direction, x) == left
      right: 100%
    @if map-get($direction, x) == right
      left: 100%
    @if map-get($direction, y) == top
      top: 0
    @if map-get($direction, y) == bottom
      bottom: 0
    @if map-get($direction, y) == center
      top: 50%
      transform: translate(-50%, -50%)

// Custom separator with image (best use it with base64 image)
// Reference http://prntscr.com/j1ni3m
= shape_separator($size: 40px, $direction: (x: left, y: top), $image: null)
  position: relative
  @if map-has-key($direction, x)
    @if map-gey($direction, x) == left
      padding-left: $size
    @if map-gey($direction, x) == right
      padding-right: $size
  @if map-has-key($direction, y)
    @if map-gey($direction, y) == top
      padding-top: $size
    @if map-gey($direction, y) == bottom
      padding-bottom: $size

  &:after
    +content
    background-image: url(#{$image})
    @if map-has-key($direction, x)
      width: $size
      height: 100%
      @if map-gey($direction, x) == left
        right: 100%
      @if map-gey($direction, x) == right
        left: 100%
    @if map-has-key($direction, y)
      width: 100%
      height: $size
      @if map-gey($direction, y) == top
        bottom: 100%
      @if map-gey($direction, y) == bottom
        top: 100%

// Overlay can be used for modals
= overlay($color: rgba(0,0,0,.5))
  position: absolute
  top: 0
  bottom: 0
  left: 0
  right: 0
  background: $color


// * PDF size alert (UX case). It's better to warn user about size of pdf
// *
// * Example:
// * <a href="rules.pdf" data-size="12mb">Rules</a>
// * Output: Rules (PDF, 12mb)
// *
// * Haml Rails way:
// * = link_to "docs/rules.pdf" do
// *   %span Rules {file_size('docs/rules.pdf')}
// *
= pdf_warning
  a[href$=".pdf"][data-size]:after
    content: " (PDF, " attr(data-size) ")"

/// Mixin to place items on a circle
/// @author Hugo Giraudel
/// @author Ana Tudor
/// @param {Integer} $item-count - Number of items on the circle
/// @param {Length} $circle-size - Large circle size
/// @param {Length} $item-size - Single item size
= on-circle($item-count, $circle-size, $item-size)
  position: relative
  width:  $circle-size
  height: $circle-size
  padding: 0
  border-radius: 50%
  list-style: none
  > *
    display: block
    position: absolute
    top:  50%
    left: 50%
    width:  $item-size
    height: $item-size
    margin: -($item-size / 2)

    $angle: (360 / $item-count)
    $rot: 0
    @for $i from 1 through $item-count
      &:nth-of-type(#{$i})
        transform:
          rotate($rot * 1deg)
          translate($circle-size / 2)
          rotate($rot * -1deg)
      $rot: $rot + $angle
